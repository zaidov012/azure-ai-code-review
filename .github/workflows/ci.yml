# CI/CD Workflow for Azure DevOps AI PR Review Extension

name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-python:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('task/requirements.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r task/requirements.txt
        pip install -e ".[dev]"
    
    - name: Run linters
      run: |
        cd task/src_python
        python -m flake8 src/ --max-line-length=100
        python -m black --check src/
    
    - name: Run type checking
      run: |
        cd task/src_python
        mypy --install-types
        python -m mypy src_python/ --ignore-missing-imports
    
    - name: Run unit tests
      run: |
        python scripts/run_tests.py --python --coverage --verbose
    
    - name: Upload coverage to Codecov
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-typescript:
    name: TypeScript Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: task/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('task/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install dependencies
      run: |
        cd task
        npm ci || npm install
    
    - name: Run tests
      run: |
        cd task
        npm test
    
    - name: Build TypeScript
      run: |
        cd task
        npm run build

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-python, test-typescript]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r task/requirements.txt
        pip install -e ".[dev]"
    
    - name: Run integration tests
      run: |
        python scripts/run_tests.py --markers integration --coverage
      env:
        TESTING: 'true'

  build-extension:
    name: Build Extension Package
    runs-on: ubuntu-latest
    needs: [test-python, test-typescript, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
    
    - name: Build Python package
      run: |
        python -m build
    
    - name: Build TypeScript task
      run: |
        cd task
        npm ci || npm install
        npm run build
    
    - name: Install TFX CLI
      run: |
        npm install -g tfx-cli
    
    - name: Package extension
      run: |
        tfx extension create --manifest-globs vss-extension.json
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: extension-package
        path: '*.vsix'
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: '*.vsix'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r task/src_python/ -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          trivy-results.sarif
          bandit-report.json
